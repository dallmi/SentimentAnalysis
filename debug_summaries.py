#!/usr/bin/env python3
"""
Debug Script: √úberpr√ºft ob Abstractive Summarization wirklich funktioniert
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent / "LLM Solution"))

from abstractive_summarizer import AbstractiveSummarizer

# Langer deutscher Corporate-Text (>1000 Zeichen)
long_article = """
Die Gesch√§ftsf√ºhrung der Example AG hat am Montag umfassende neue Regelungen f√ºr Homeoffice
und flexible Arbeitszeiten angek√ºndigt. Nach mehrmonatigen Verhandlungen mit dem Betriebsrat
wurde eine Einigung erzielt, die ab dem 1. Februar 2025 in Kraft tritt.

Mitarbeiter k√∂nnen k√ºnftig bis zu drei Tage pro Woche von zu Hause arbeiten. Die neue Regelung
gilt f√ºr alle Vollzeitbesch√§ftigten, die seit mindestens sechs Monaten im Unternehmen t√§tig sind.
Teilzeitbesch√§ftigte erhalten anteilig entsprechende Homeoffice-Tage.

Der Vorstand betonte, dass diese Ma√ünahme die Work-Life-Balance der Mitarbeiter verbessern und
gleichzeitig die Produktivit√§t steigern soll. Eine Evaluierung der neuen Regelung ist nach sechs
Monaten geplant. Zus√§tzlich werden flexible Kernarbeitszeiten zwischen 10 und 15 Uhr eingef√ºhrt.

Die IT-Abteilung stellt die notwendige Hardware und Software zur Verf√ºgung. F√ºr die Nutzung ist
ein Antrag √ºber das HR-Portal erforderlich. F√ºhrungskr√§fte m√ºssen die Antr√§ge innerhalb von f√ºnf
Arbeitstagen pr√ºfen. Bei Ablehnung muss eine schriftliche Begr√ºndung erfolgen.

Die neue Regelung gilt f√ºr alle Abteilungen au√üer dem Kundenservice. Mitarbeiter im Kundenservice
haben spezielle Schichtpl√§ne und sind davon ausgenommen. F√ºr sie werden separate L√∂sungen erarbeitet.
"""

print("=" * 80)
print("DEBUG: Abstractive vs Extractive Summarization")
print("=" * 80)

print(f"\nüìÑ ORIGINAL ARTIKEL:")
print(f"   L√§nge: {len(long_article)} Zeichen / {len(long_article.split())} W√∂rter")
print(f"\n{long_article[:500]}...")

# Test 1: Abstractive mit max_length=100 (ALT - zu kurz!)
print("\n" + "=" * 80)
print("TEST 1: Abstractive mit max_length=100 (ALT)")
print("=" * 80)

try:
    summarizer = AbstractiveSummarizer()

    summary_100 = summarizer.summarize(
        long_article,
        source_lang="de_DE",
        max_length=100,  # ALT: Nur 100 tokens!
        min_length=30
    )

    print(f"\n‚ú® Summary (max_length=100):")
    print(f"   L√§nge: {len(summary_100)} Zeichen / {len(summary_100.split())} W√∂rter")
    print(f"\n{summary_100}")
    print(f"\n‚ö†Ô∏è  Abgeschnitten bei ~{len(summary_100)} Zeichen!")

except Exception as e:
    print(f"‚ùå Fehler: {e}")

# Test 2: Abstractive mit max_length=200 (NEU - l√§nger!)
print("\n" + "=" * 80)
print("TEST 2: Abstractive mit max_length=200 (NEU)")
print("=" * 80)

try:
    summary_200 = summarizer.summarize(
        long_article,
        source_lang="de_DE",
        max_length=200,  # NEU: 200 tokens!
        min_length=50
    )

    print(f"\n‚ú® Summary (max_length=200):")
    print(f"   L√§nge: {len(summary_200)} Zeichen / {len(summary_200.split())} W√∂rter")
    print(f"\n{summary_200}")

    if len(summary_200) > len(summary_100):
        print(f"\n‚úì L√§nger als vorher! (+{len(summary_200) - len(summary_100)} Zeichen)")

except Exception as e:
    print(f"‚ùå Fehler: {e}")

# Vergleich
print("\n" + "=" * 80)
print("VERGLEICH:")
print("=" * 80)
print(f"Original:              {len(long_article)} Zeichen")
print(f"Summary (max_len=100): {len(summary_100)} Zeichen (ALT)")
print(f"Summary (max_len=200): {len(summary_200)} Zeichen (NEU)")
print(f"\nDifferenz: +{len(summary_200) - len(summary_100)} Zeichen")

# Check ob es wirklich abstractive ist
if summary_100[:100] in long_article:
    print("\n‚ö†Ô∏è  WARNING: Summary scheint 1:1 Kopie zu sein!")
else:
    print("\n‚úì Summary ist neu generiert (nicht 1:1 Kopie)")
